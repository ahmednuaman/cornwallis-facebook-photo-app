// Generated by CoffeeScript 1.3.3
(function() {
  var Common;

  Common = (function() {
    var addTextToPhoto, canvas, getPhoto, goto, handleHashChange, handleTakePhotoFail, handleTakePhotoSuccess, image, imageX, ready, sortOutText, stage, stateConfirmPhoto, stateEditPhoto, statePickExistingPhoto, stateTakePhoto, text, textColour, textFont, textOutline;

    function Common() {}

    window.location.hash = '';

    canvas = null;

    image = 'assets/image/test.jpg';

    imageX = 0;

    stage = null;

    text = {};

    textColour = '#ffffff';

    textFont = 'bold ' + (window.devicePixelRatio * 4) + '0px Arial';

    textOutline = '#000000';

    ready = function() {
      var height, width;
      canvas = document.getElementById('editphotoimage');
      if (window.devicePixelRatio > 1) {
        height = canvas.height;
        width = canvas.width;
        canvas.height = height * window.devicePixelRatio;
        canvas.width = width * window.devicePixelRatio;
        canvas.style.height = height + 'px';
        canvas.style.width = width + 'px';
      }
      stage = new Stage(canvas);
      return window.onhashchange = handleHashChange;
    };

    handleHashChange = function() {
      var hash;
      hash = window.location.hash.replace('#', '');
      switch (hash) {
        case 'takephoto':
          return stateTakePhoto();
        case 'pickexistingphoto':
          return statePickExistingPhoto();
        case 'editphoto':
          return stateEditPhoto();
        case 'confirmphoto':
          return stateConfirmPhoto();
      }
    };

    stateTakePhoto = function() {
      try {
        return getPhoto(Camera.PictureSourceType.CAMERA);
      } catch (error) {
        return handleTakePhotoFail(error);
      }
    };

    statePickExistingPhoto = function() {
      try {
        return getPhoto(Camera.PictureSourceType.PHOTOLIBRARY);
      } catch (error) {
        return handleTakePhotoFail(error);
      }
    };

    stateEditPhoto = function() {
      var img;
      img = new Image();
      stage.clear();
      stage.update();
      text = {};
      img.onload = function() {
        var bitmap;
        bitmap = new Bitmap(img);
        bitmap.scaleY = canvas.height / img.height;
        bitmap.scaleX = bitmap.scaleY;
        bitmap.x = imageX = canvas.width - (img.width * bitmap.scaleX);
        stage.addChild(bitmap);
        return stage.update();
      };
      img.src = image;
      return $('#editphoto').find('select').unbind('change').change(addTextToPhoto).each(function() {
        return $(this).val($(this).find('option:first'));
      });
    };

    addTextToPhoto = function(event) {
      var base, element, id, outline;
      element = $(this);
      id = element.attr('id');
      base = text[id];
      outline = text[id + 'outline'];
      if (!!base && !!outline) {
        base.text = sortOutText(element.val());
        outline.text = sortOutText(element.val());
      } else {
        text[id] = base = new Text(sortOutText(element.val()), textFont, textColour);
        text[id + 'outline'] = outline = new Text(sortOutText(element.val()), textFont, textOutline);
        outline.outline = true;
        base.maxWidth = outline.maxWidth = canvas.width;
        base.textAlign = outline.textAlign = 'center';
        base.x = outline.x = imageX * -1;
        base.y = outline.y = id.indexOf('top') === -1 ? canvas.height - 20 * window.devicePixelRatio : 50 * window.devicePixelRatio;
        stage.addChild(base);
        stage.addChild(outline);
      }
      return stage.update();
    };

    stateConfirmPhoto = function() {
      return $('#confirmphotoimage').attr('src', stage.toDataURL(null, 'image/jpeg'));
    };

    sortOutText = function(text) {
      return text.toUpperCase().replace(/_/g, ' ').replace(/\|/g, "\n");
    };

    getPhoto = function(source) {
      try {
        return navigator.camera.getPicture(handleTakePhotoSuccess, handleTakePhotoFail, {
          allowEdit: true,
          quality: 50,
          sourceType: source,
          destinationType: Camera.DestinationType.FILE_URI,
          targetWidth: canvas.width,
          targetHeight: canvas.height
        });
      } catch (error) {
        return handleTakePhotoFail(error);
      }
    };

    handleTakePhotoSuccess = function(imageURI) {
      image = imageURI;
      return goto('editphoto');
    };

    handleTakePhotoFail = function(reason) {
      return goto('editphoto');
    };

    goto = function(state) {
      return window.location.href = '#' + state;
    };

    if (!!window.device) {
      document.addEventListener('deviceready', ready, false);
    } else {
      $(ready);
    }

    return Common;

  })();

}).call(this);
